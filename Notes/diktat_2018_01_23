Plan für heute:
• Erste Version des Inhaltsverzeichnisses für die Bachelor Arbeit
• Grundlagen Kapitel genauer dargestellt

Verschiedene Grundlagen die für die Bachelor Arbeit wichtig sind. Zum einen, wäre dort das MDSD (Model Driven Software Development) an sich und zum anderen verwandte Themen wie: Parsing, damit im Zusammenhang Abstract Syntax Trees und DSLs (Domain Specific Languages). Bei den Domain Specific Languages muss dringend eine Unterscheidung zwischen internal DSLs und external DSLs erfolgen. Insbesondere bei den internal DSLs könnte unter Umständen ein Unterschied gemacht werden zwischen verschiedenen Implementationsmöglichkeiten. Vor allem könnte der Aufbau von Fluent Interfaces genauer beschrieben werden, genau wie der Zusammenhang von Fluent Interfaces und dem Builder Pattern [Zitat: Gang of Four].
Bezüglich der Implementation von internal DSLs sind auch Command Query APIs in einem oder zwei Absätzen zu betrachten.
Beim Einsatz externer domänenspezifischer Sprachen wird nicht tiefer auf die Implementation eingegangen, lediglich erwähnt, dass diese es ermöglichen, durch eine eigene Syntax, DSL Code schlanker zu gestalten. Eventuell sind hier Beispiele angebracht.
Auf die Frage wie die Auswahl zwischen dem Einsatz einer internen oder einer externen DSL entschieden wird, sollte auch eingegangen werden.
Im Rahmen der verschiedenen eingesetzten Prozesse kommen mehrere Modelle zum Einsatz.
Beim parsen wird der Code zuerst in einen Abstract Syntax Tree  umgewandelt und dann von meinem Code in ein eigenes Modell überführt. Das überführen von, zum Beispiel dem AST in ein weiteres Modell welches unter Umständen bereits weitere Informationen enthält, oder auch kürzer gefasst ist als das Ursprungsmodell, nennt Fowler ein semantisches Modell. Generell muss bei der Verwendung von Codegeneratoren oder in der modellgetriebene Softwareentwicklung noch auf die Begrifflichkeit des Metamodells eingegangen werden. Das Metamodell ist hier ein abstraktes Modell, d. h. im praktischen Fall der Implementation lediglich eine Sammlung von datenstrukturgebenden Klassen. Eine Instanz des Metamodells, also das konkrete Modell, ist nicht mehr nur eine Definition von möglichen Feldern sondern mit  tatsächlichen Informationen angereichert. Entweder hier oder in einem späteren Kapitel sollte erklärt werden warum Modelle zum Einsatz kommen und begründet werden, warum es von Vorteil sein kann weitere Modelle zwischen einzelnen Schritten des Generators einzuführen.
