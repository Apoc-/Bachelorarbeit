Generative Programming (Czarnecki)
Things to look up:
	Aspect Oriented Programming (AOP) - 
	Template metaprogramming in C++
	Intentional Programming - Programmierparadigma Quelltext + intention durch weitere Modelle
	
	
Metaprogramming and Generators (S. 11)
	Embody the configuration knowledge and assemble the implementation components according to a system specification
	
Cooperating Generators (S. 11)
	A generator might call other generators to get components it needs for further assembly

Approaches to building generators (S. 12)
	_ Writing from scratch
	_ Template metaprogramming 
	_ Extendible programming environments
	
Generative Programming vs Automatic Programming (S.12f)
	_ Automatic programming has been around for about 30 years [Bal85].
	_ Difference: 
		> Generative programming acknowledges different levels of automation
		> Automatic programming aims for the highest levels of automation
	_ Automatic programming requires huge amounts of knowledge of the domain
	_ Automatic programming often involves artificial intelligence techniques
	
The automation assumption (S. 13)
	[CE99a] states: "If you can compose components manually, you can also automate this process"

Economies of Scope (S. 13) [Wit96]
	_ components are reused for each member of a family
	_ learning from previous errors
	_ time-to-market for new members potentially shorter
	_ new features can be added to generative models
	
The idea of software reuse (S. 15)
	_ building reusable components costs more than building one system
	_ building a generative model for a family is even more costly
	_ there must be an actual need for several members of a system family
	
The "break-even point" (S. 15)
	? no reliable data for determing this point of how many systems need to be built to armortize the investment of using a generator
	_ if you are only building one system in a domain or if you are on a tight schedule you might not want to build reusable components and generators
	_ there might be reusable components on the market that might be beneficial to building  a one-of-a-kind system
	
Programming in the small and the large (S. 16)
	_ generative programming can be applied to any level of programming
	_ follows the philosophy of multiparadigm design [Cop98] - Use the right paradigm for the right task